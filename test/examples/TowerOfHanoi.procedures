[
    $literals: [
        "peg A"
        $type
        /bali/collections/Stack/v1
        $itemType
        /bali/elements/Number/v1
        $range
        1
        infinity
        "peg B"
        "peg C"
        $pegs
        $steps
        "Move disk {disk} from {fromPeg} to {toPeg}."
    ]
    $constants: [:]
    $procedures: [
        $play: [
            $parameters: []
            $variables: [
                $$index-1
                $$index-2
                $$index-4
                $$index-5
                $$iterator-3
                $$result
                $n
                $numberOfDisks
                $target
            ](
                $type: /bali/collections/Set/v1
            )
            $procedures: [
                $asCatalog
                $getIterator
                $getNext
                $getSubcomponent
                $hasNext
                $moveTower
                $push
                $setSubcomponent
            ](
                $type: /bali/collections/Set/v1
            )
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 86
                "3.WithStatement": 93
                "3.1.ConditionClause": 98
                "3.1.1.EvaluateStatement": 104
                "3.ConditionRepeat": 123
                "3.WithStatementDone": 124
                "4.EvaluateStatement": 125
                "5.ReturnStatement": 138
            ]
            $instructions: "
                1.EvaluateStatement:
                INVOKE $catalog
                PUSH LITERAL `"peg A"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Stack/v1`
                INVOKE $catalog
                PUSH LITERAL `$itemType`
                PUSH LITERAL `/bali/elements/Number/v1`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $stack WITH PARAMETER
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Stack/v1`
                INVOKE $catalog
                PUSH LITERAL `$itemType`
                PUSH LITERAL `/bali/elements/Number/v1`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $stack WITH PARAMETER
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $catalog
                PUSH LITERAL `$type`
                PUSH LITERAL `/bali/collections/Stack/v1`
                INVOKE $catalog
                PUSH LITERAL `$itemType`
                PUSH LITERAL `/bali/elements/Number/v1`
                INVOKE $catalog
                PUSH LITERAL `$range`
                PUSH LITERAL `1`
                PUSH LITERAL `infinity`
                INVOKE $range WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $setParameters WITH 2 PARAMETERS
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                INVOKE $stack WITH PARAMETER
                INVOKE $association WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                STORE VARIABLE $$index-1
                INVOKE $list
                LOAD VARIABLE $$index-1
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $setSubcomponent ON TARGET WITH PARAMETERS
                
                2.EvaluateStatement:
                INVOKE $list
                STORE VARIABLE $$index-2
                INVOKE $list
                LOAD VARIABLE $$index-2
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $setSubcomponent ON TARGET WITH PARAMETERS
                
                3.WithStatement:
                LOAD VARIABLE $numberOfDisks
                PUSH LITERAL `1`
                INVOKE $range WITH 2 PARAMETERS
                EXECUTE $getIterator ON TARGET
                STORE VARIABLE $$iterator-3
                
                3.1.ConditionClause:
                LOAD VARIABLE $$iterator-3
                EXECUTE $hasNext ON TARGET
                JUMP TO 3.WithStatementDone ON FALSE
                LOAD VARIABLE $$iterator-3
                EXECUTE $getNext ON TARGET
                STORE VARIABLE $n
                
                3.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH LITERAL `$pegs`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                PUSH LITERAL `"peg A"`
                STORE VARIABLE $$index-4
                INVOKE $list
                LOAD VARIABLE $$index-4
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                INVOKE $list
                LOAD VARIABLE $n
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.ConditionRepeat:
                JUMP TO 3.1.ConditionClause
                
                3.WithStatementDone:
                SKIP INSTRUCTION
                
                4.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                LOAD VARIABLE $numberOfDisks
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg A"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg C"`
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH LITERAL `"peg B"`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                5.ReturnStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                STORE VARIABLE $$index-5
                INVOKE $list
                LOAD VARIABLE $$index-5
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                EXECUTE $asCatalog ON TARGET
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                A00F2801A00F28022803A00F28042805A00F280628072808B063B009B002
                A854B077B009B002A854B077B009B002A854A87FB009B0022809A00F2802
                2803A00F28042805A00F280628072808B063B009B002A854B077B009B002
                A854B077B009B002A854A87FB009B002280AA00F28022803A00F28042805
                A00F280628072808B063B009B002A854B077B009B002A854B077B009B002
                A854A87FB009B0028001A04C6001B002A854D808A04C8002A04C6002B002
                A854D80860082807B063D00280056005D005187C6005D00380076009A04C
                280BB002A854D80428018003A04C6003B002A854D804A04C6007B002A854
                D8078006006200006009A04C6008B0022801B002280AB0022809B002A854
                D80680066009280C8004A04C6004B002A854D804D001E000
            '(
                $encoding: $base16
                $mediatype: "application/bcod"
            )
        ]
        $moveTower: [
            $parameters: [
                $height
                $fromPeg
                $toPeg
                $withPeg
            ]
            $variables: [$$result, $target](
                $type: /bali/collections/Set/v1
            )
            $procedures: [$moveDisk, $moveTower](
                $type: /bali/collections/Set/v1
            )
            $addresses: [
                "1.IfStatement": 1
                "1.1.ConditionClause": 2
                "1.1.1.EvaluateStatement": 4
                "1.1.2.EvaluateStatement": 19
                "1.1.3.EvaluateStatement": 28
                "1.IfStatementDone": 43
            ]
            $instructions: "
                1.IfStatement:
                SKIP INSTRUCTION
                
                1.1.ConditionClause:
                PUSH PARAMETER $height
                JUMP TO 1.IfStatementDone ON FALSE
                
                1.1.1.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.2.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveDisk ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.1.3.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH PARAMETER $height
                PUSH LITERAL `1`
                INVOKE $difference WITH 2 PARAMETERS
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $withPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $toPeg
                INVOKE $addItem WITH 2 PARAMETERS
                PUSH PARAMETER $fromPeg
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $moveTower ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                1.IfStatementDone:
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                00003801182B6002A04C38012807B019B0023802B0023804B0023803B002
                A854D80280016002A04C3802B0023803B002A854D80180016002A04C3801
                2807B019B0023804B0023803B0023802B002A854D80280016001E000
            '(
                $encoding: $base16
                $mediatype: "application/bcod"
            )
        ]
        $moveDisk: [
            $parameters: [$fromPeg, $toPeg]
            $variables: [
                $$index-1
                $$index-2
                $$index-3
                $$result
                $disk
                $target
            ](
                $type: /bali/collections/Set/v1
            )
            $procedures: [
                $append
                $getSubcomponent
                $pop
                $push
            ](
                $type: /bali/collections/Set/v1
            )
            $addresses: [
                "1.EvaluateStatement": 1
                "2.EvaluateStatement": 16
                "3.EvaluateStatement": 35
            ]
            $instructions: "
                1.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH LITERAL `$pegs`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                PUSH PARAMETER $fromPeg
                STORE VARIABLE $$index-1
                INVOKE $list
                LOAD VARIABLE $$index-1
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                EXECUTE $pop ON TARGET
                STORE VARIABLE $disk
                
                2.EvaluateStatement:
                LOAD VARIABLE $target
                INVOKE $list
                PUSH LITERAL `$pegs`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                PUSH PARAMETER $toPeg
                STORE VARIABLE $$index-2
                INVOKE $list
                LOAD VARIABLE $$index-2
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                INVOKE $list
                LOAD VARIABLE $disk
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $push ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                
                3.EvaluateStatement:
                LOAD VARIABLE $target
                PUSH LITERAL `$steps`
                STORE VARIABLE $$index-3
                INVOKE $list
                LOAD VARIABLE $$index-3
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $getSubcomponent ON TARGET WITH PARAMETERS
                INVOKE $list
                PUSH LITERAL `"Move disk {disk} from {fromPeg} to {toPeg}."`
                INVOKE $addItem WITH 2 PARAMETERS
                INVOKE $parameters WITH PARAMETER
                EXECUTE $append ON TARGET WITH PARAMETERS
                STORE VARIABLE $$result
                LOAD VARIABLE $$result
                HANDLE RESULT
            "(
                $mediatype: "application/basm"
            )
            $bytecode: '
                6006A04C280BB002A854D80238018001A04C6001B002A854D802D0038005
                6006A04C280BB002A854D80238028002A04C6002B002A854D802A04C6005
                B002A854D80480046006280C8003A04C6003B002A854D802A04C280DB002
                A854D80180046004E000
            '(
                $encoding: $base16
                $mediatype: "application/bcod"
            )
        ]
    ]
](
    $tag: #SFYVYDM5Q1C3D0KFPQVJ1T9NYFCTVB2W
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: [
        $protocol: v1
        $timestamp: <2019-08-16T21:41:26.688>
        $tag: #SFYVYDM5Q1C3D0KFPQVJ1T9NYFCTVB2W
        $version: v1
        $digest: '
            QG4P95YDAXQN4NC2Z1LJTYZTK1162DW19XJ15ZHHD9A88JMBSXAA8YM0BTY2
            QQ9Q215HSAMZZ79QZB9WRDBDHPVP2X07G81XHR5MKSH
        '
    ](
        $type: /bali/notary/Citation/v1
    )
)
